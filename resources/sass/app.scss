// Variables
@import 'variables';

// Bootstrap
@import '~bootstrap/scss/bootstrap';
@import 'bootstrap-icons';

@import 'algolia-places';

.font-size-normal {
    font-size: 1em !important;
}

.lh-1 {
    line-height: 1 !important;
}

.link-muted {
    color: inherit;

    &:hover,
    &:focus,
    &.active {
        color: $link-color !important;
        text-decoration: none;
    }

    &.active {
        font-weight: bolder;
    }
}

.cover {
    object-fit: cover;
}

// Create spacing utilities
@each $breakpoint in map-keys($grid-breakpoints) {
    @include media-breakpoint-up($breakpoint) {
        $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

        @each $modifier, $spacing in $spacers {
            .#{'spacing' + $infix + '-' + $modifier} > :not(:last-child) {
                margin-bottom: $spacing;
            }
        }
    }
}

// Gray color utilities
@each $shade, $hex in $grays {
    .#{'bg-gray-' + $shade} {
        background-color: $hex;
    }
    .#{'text-gray-' + $shade} {
        color: $hex;
    }
    .#{'border-gray-' + $shade} {
        border-color: $hex;
    }
}

// Color utilities
@each $color, $hex in $colors {
    .#{'bg-' + $color} {
        background-color: $hex;
    }
    .#{'text-' + $color} {
        color: $hex;
    }
    .#{'border-' + $color} {
        border-color: $hex;
    }
}

// Responsive border utilities
@each $breakpoint in map-keys($grid-breakpoints) {
    @include media-breakpoint-up($breakpoint) {
        $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

        .border#{$infix}-top {      border-top: $border-width solid $border-color !important; }
        .border#{$infix}-right {    border-right: $border-width solid $border-color !important; }
        .border#{$infix}-bottom {   border-bottom: $border-width solid $border-color !important; }
        .border#{$infix}-left {     border-left: $border-width solid $border-color !important; }

        .border#{$infix}-top-0 {    border-top: 0 !important; }
        .border#{$infix}-right-0 {  border-right: 0 !important; }
        .border#{$infix}-bottom-0 { border-bottom: 0 !important; }
        .border#{$infix}-left-0 {   border-left: 0 !important; }

        .border#{$infix}-x {
            border-left: $border-width solid $border-color !important;
            border-right: $border-width solid $border-color !important;
        }

        .border#{$infix}-y {
            border-top: $border-width solid $border-color !important;
            border-bottom: $border-width solid $border-color !important;
        }

        .rounded#{$infix} {
            border-radius: .25rem;
        }
        .rounded#{$infix}-pill {
            border-radius: 50rem;
        }
    }
}

.border-placeholder {
    border-width: 2px;
    border-style: dashed;
    border-color: $gray-300;
}

.btn.border-placeholder:hover {
    border-color: color('blue');
}

// Trix
@import '~trix/dist/trix.css';

.tribute-container {
    > ul {
        margin: 0;
        padding: 0;
    }
    .dropdown-item {
        cursor: pointer;
        &.hover {
            @extend .dropdown-item, :hover;
        }
    }
}
trix-editor {
    height: auto !important;

    &:empty:not(:focus)::before {
        color: $gray-600;
        opacity: 1;
    }

    .attachment--content {
        display: inline-block;

        .attachment__caption,
        .attachment__toolbar {
            display: none;
        }
    }
}

.trix-wrapper:focus {
    outline: none;

    .form-control {
        @extend .form-control, :focus;
    }
}

.trix-active {
    @extend .active;
}

trix-editor,
.trix-content {
    h1 {
        font-size: 1.5em;
    }
    h2 {
        font-size: 1.2em;
    }
    h3 {
        font-size: 1em;
    }
}

[v-cloak] {
    display: none;
}

.input-group-expanding {
    position: relative;
    min-width: 2.25rem;
    width: 0%;
    height: 2.25rem;
    transition: width .25s;
    border-radius: .25rem;

    &.open {
        width: 100%;
    }

    &:not(.open) {
        overflow: hidden;

        .btn {
            width: 2.25rem;
        }
    }

    .form-control,
    .btn {
        position: absolute;
        top: 0;
        right: 0;
    }

    .form-control {
        height: 2.25rem;
        padding-right: 2.25rem + .5rem;
    }

    .btn {
        display: flex;
        align-items: center;
        height: 2.25rem;
        line-height: 1;
        z-index: 4;
    }
}

#forumSidebar {
    @include media-breakpoint-up(sm) {
        min-width: 200px;
        max-width: 280px;
    }

    #forumSearchbar {
        .input-group-expanding {
            border-radius: 50rem;

            .form-control, .btn {
                border-radius: 50rem;
            }

            .btn {
                width: 2.25rem;

                svg {
                    transform: scale(1.5);
                }
            }

            @include media-breakpoint-up(sm) {
                width: 100%;

                &, .form-control {
                    border-radius: .25rem;
                }

                .btn {
                    border-radius: 0 .25rem .25rem 0;
                }
            }
        }
    }
}

.form-control.StripeElement {
    padding-top: calc(#{$input-btn-padding-y} + .2em);

    &.StripeElement--focus {
        @extend .form-control, :focus;
    }

    &.StripeElement--invalid {
        @extend .is-invalid;
    }
}

.pricing-card {
    transition: $transition-base;
    &:hover {
        transform: scale(1.05);
    }
}

.embedded-avatar-upload-btn {
    transition: all ease-in-out .15s;
    opacity: 0;
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 25%;
    display: block;
    margin-bottom: 0;
    border: 0;
    color: $white;
    background-color: rgba($dark, .4);
    text-align: center;
    cursor: pointer;

    &:hover, &:focus {
        background-color: rgba($dark, .6);
        outline: none;
    }

    input[type=file] {
        position: fixed;
        top: -100em;
    }
}
.embed-responsive:hover .embedded-avatar-upload-btn {
    opacity: 1;
}
